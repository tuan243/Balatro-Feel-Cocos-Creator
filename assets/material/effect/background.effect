// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        sampleTexture:    { value: white }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include "../chunk/noise"
  #include "../chunk/uv"
  #include "../chunk/math"

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  uniform sampler2D sampleTexture;

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      // o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    // o *= color;

    vec2 tiling = vec2(1.5, 1.);

    // float newTime = cc_time.x - floor(cc_time.y);
    // float newTime = cc_time.x - floor(cc_time.x);
    float newTime= cc_time.w;
    float time = newTime * 0.01;
    vec2 uv = uv0 * tiling + vec2(1., -1.) * time;

    float simpleNoise = SimpleNoise(uv, 16.2);
    float cosTime = cos(time);
    vec2 rotateCoord = RotateCoordinates(uv0, vec2(cosTime), time);

    vec2 addedCoord = rotateCoord + simpleNoise;

    vec2 twirl = twirlUV(addedCoord, vec2(0.5), 30., vec2(0.));

    float simpleNoise2 = SimpleNoise(uv0, 31.3);
    float powerNoise = pow(simpleNoise2, 2.14);

    vec2 multiplyTwirlUV = twirl * powerNoise;

    vec4 texture2 = CCSampleWithAlphaSeparated(sampleTexture, multiplyTwirlUV);

    float simpleNoise3 = SimpleNoise(uv0, 52.8);
    vec4 posterize = Posterize(vec4(simpleNoise3), vec4(2.1));

    vec4 blend = blendLinearBurn(texture2, posterize, 0.05);
    o.rgb = blend.rgb;
    // o.rgb = texture2.rgb;

    o *= color;
    // o.rgb = vec3(SimpleNoise(uv, 16.2));
    ALPHA_TEST(o);
    return o;
  }
}%
