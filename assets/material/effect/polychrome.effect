// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        # sampleTexture:    { value: white }
        rotation:    { value: [0., 0.] }
        polyPower: { value: 0.2 }
        polyFrequency: { value: 1. }
        polyBrightness: { value: 0.76 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include "../chunk/noise"
  #include "../chunk/uv"
  #include "../chunk/math"

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  // uniform sampler2D sampleTexture;

  uniform Constant {
    vec2 rotation;
    float polyPower;
    float polyFrequency;
    float polyBrightness;
  };

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      // o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    // vec2 rotation = vec2(0., 0.);
    vec2 center = vec2(0.5 + rotation.y * 0.45, 0.2);

    vec2 twirl = twirlUV(uv0, center, 4., rotation) * polyFrequency;

    vec4 startColor = vec4(1., 0.07568422, 0, 0);
    vec3 hue = hueNormalized(startColor.rgb, twirl.x);

    vec3 rWeights = vec3(0.81, -0.25, 0.27);
    vec3 gWeights = vec3(-0.12, 0.65, 0.);
    vec3 bWeights = vec3(0., 0., 1.);
    
    vec3 mixedHue = channelMixer(hue, rWeights, gWeights, bWeights) * polyPower;

    vec4 cardTexture = CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
    cardTexture.rgb *= polyBrightness;
    vec3 cardHue = hueNormalized(cardTexture.rgb, twirl.x);

    vec3 cardMixHue = cardHue + mixedHue;

    vec3 cardContrast = contrast(cardMixHue, 1.);

    vec3 cardContrast2 = cardContrast * (1. - (cardTexture.y * 2.));
    vec3 cardContrast2Mixer = channelMixer(cardContrast2, rWeights, gWeights, bWeights);

    vec3 cardContrastBlend = blendDifference(vec4(cardContrast, 0.), vec4(cardContrast2Mixer, 0.), 0.2).rgb;
    o.rgb = cardContrastBlend;
    o.a = cardTexture.a;

    ALPHA_TEST(o);
    return o;
  }
}%
